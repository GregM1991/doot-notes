generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image UserImage?
  notes Note[]
  password Password?
  sessions Session[]
  connections Connection[]
}

model Password {
  hash String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  content  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]
  video     Video?
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String
}

model Session {
  id String @id @default(cuid())
  expirationDate DateTime

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Verification {
  id String @id @default(cuid())
  createdAt DateTime @default(now())

  // Type type of verification, e.g "email" or "phone"
  type String

  // The thing we're trying to verify, e.g a user's email or phone number
  target String

  // The secret key used to generate the otp
  secret String
  
  // The algo used to generate the otp
  algorithm String

  // The nuber of digits in the otp
  digits Int

  // The number of seconds the otp is valid for
  period Int

  // The valid characters of the otp
  charSet String

  // When it's safe to delete this verification
  expiresAt DateTime?

  // Two verifications of the same target and type (eg. target:
  // "greg@besteEmailDomain.com" with type: "email", can't be created twice)
  // This enhances security, prevents redundant veriification, improves data
  // integrity and simplifies verification managemnt
  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Video {
    id           String   @id @default(cuid())
    noteId       String   @unique
    note         Note     @relation(fields: [noteId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
    videoKey     String
    thumbnailKey String
    fileName     String
    originalName String
    contentType  String
    frameRate    Int
    duration     Float
    width        Int
    height       Int
    codec        String
    bitrate      Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([noteId])
}